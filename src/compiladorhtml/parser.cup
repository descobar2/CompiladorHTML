package compiladorhtml;
import Nodos.NodoError;
import java_cup.runtime.Symbol;

parser code 
{:
    private Symbol s;
    String descripError = "";

    public Symbol getS(){
        return this.s;
    }
    
    public void syntax_error(Symbol s){
        this.s = s;
        String desc_error;
        
        String valor = (s != null && s.value != null) ? s.value.toString() : "desconocido";
        int linea = (s != null) ? Integer.parseInt(Integer.toString(s.left)) : -1;
        int columna = (s != null) ? Integer.parseInt(Integer.toString(s.right)) : -1;

        desc_error = "Error sintáctico recuperable: '" + valor
                + "', en línea " + linea + " y columna " + columna;

        System.err.println(desc_error);

        GUI.errores.add(new NodoError(valor, linea, columna, "Sintáctico", "Error recuperable"));
        descripError = "";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String valor = (s != null && s.value != null) ? s.value.toString() : "desconocido";
        int linea = (s != null) ? Integer.parseInt(Integer.toString(s.left)) : -1;
        int columna = (s != null) ? Integer.parseInt(Integer.toString(s.right)) : -1;

        String desc_error = "Error sintáctico irrecuperable: '" + valor +
                "', en línea " + linea + " y columna " + columna;

        System.err.println(desc_error);

        GUI.errores.add(new NodoError(valor, linea, columna, "Sintáctico", "Error irrecuperable"));
        throw new Exception("Fin del análisis debido a error irrecuperable.");
    }
:};

/* Terminals (tokens from lexer) */
terminal Asignar, Coma, Punto, PuntoComa, Admiracion, Pipe, CierreDiag,
         AperturaE, CierreE, LlaveA, LlaveC, CorcheteA, CorcheteC, Public,
         Class, Let, Private, String, Connection, Try, Catch, ForName,
         DriverManager, GetConnection, ClassNotFoundException, SQLException, 
         PrintStackTrace, Return, Static, Void, Main, Args, ConnectionMysql,
         New, If, Else, Null, System, Out, Println, Ident, Numero, CADENA, 
         ParA, ParC, DiferenteDe;

/* Non-terminals */
non terminal INICIO, CUERPO, DECLARACIONES, DECLARACION, METODOS, METODO, 
              SENTENCIAS, SENTENCIA;

/* Starting symbol */
start with INICIO;

/* Grammar rules */
INICIO ::= Public Class Ident LlaveA CUERPO LlaveC;

CUERPO ::= DECLARACIONES METODOS;

DECLARACIONES ::= 
    | DECLARACION DECLARACIONES
    ;

DECLARACION ::= 
      Private String Ident Asignar CADENA PuntoComa
    | Let Ident Asignar CADENA PuntoComa
    | Let Ident Asignar Numero PuntoComa
    | Ident Asignar Numero PuntoComa
    | Ident Asignar CADENA PuntoComa
    | Connection Ident Asignar Null PuntoComa
    ;

METODOS ::= 
    | METODO METODOS
    ;

METODO ::= 
      Public Connection Ident ParA ParC LlaveA SENTENCIAS LlaveC
    | Public Static Void Main ParA String CorcheteA CorcheteC Ident ParC LlaveA SENTENCIAS LlaveC
    ;

SENTENCIAS ::= 
    | SENTENCIA SENTENCIAS
    ;

SENTENCIA ::= 
      Try LlaveA SENTENCIAS LlaveC Catch ParA ClassNotFoundException Pipe SQLException Ident ParC LlaveA SENTENCIAS LlaveC
    | Class Punto ForName ParA Ident ParC PuntoComa
    | Ident Asignar DriverManager Punto GetConnection ParA Ident Coma Ident Coma Ident ParC PuntoComa
    | Ident Punto PrintStackTrace ParA ParC PuntoComa
    | Return Ident PuntoComa
    | If ParA Ident DiferenteDe Null ParC LlaveA SENTENCIAS LlaveC Else LlaveA SENTENCIAS LlaveC
    | System Punto Out Punto Println ParA CADENA ParC PuntoComa
    ;
