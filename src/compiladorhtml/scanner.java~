/* The following code was generated by JFlex 1.4.3 on 5/31/25, 5:40 AM */

package compiladorhtml;

import java_cup.runtime.Symbol;
import Nodos.NodoError;
import Nodos.Token;
import static compiladorhtml.GUI.tablaSimbolo;
import javax.swing.table.DefaultTableModel;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/31/25, 5:40 AM from the specification file
 * <tt>src/compiladorhtml/scanner.flex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    42,  0,  0,  0,  0,  0,  0,  0, 46, 46, 40,  0, 46, 39,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    46,  8, 49,  3,  4,  0,  0,  0,  0,  0,  0,  0,  2,  0, 48,  5, 
    48, 48, 48, 48, 48, 45, 48, 48, 44, 48,  0,  0,  6,  1,  7,  0, 
     0, 47, 43, 11,  9, 15, 47, 47, 47, 47, 47, 47, 47, 47, 47, 10, 
    14, 47, 47, 47, 12, 47, 47, 47, 47, 13, 47,  0, 36,  0,  0, 48, 
     0, 21, 24, 33, 22, 20, 35, 28, 16, 23, 37, 47, 19, 18, 29, 25, 
    30, 47, 32, 31, 17, 38, 27, 34, 47, 26, 47,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 47,  0,  0,  0,  0,  0,  0,  0, 47,  0,  0,  0, 47,  0,  0, 
     0, 47,  0, 47,  0,  0,  0,  0,  0,  0, 47,  0,  0,  0,  0,  0, 
     0, 47,  0,  0,  0,  0,  0,  0,  0, 47,  0,  0,  0, 47,  0,  0, 
     0, 47,  0, 47,  0,  0,  0,  0,  0,  0, 47,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\12\12\1\13\3\12\1\1\1\12\2\14"+
    "\1\15\1\1\1\16\2\17\1\20\16\12\1\0\1\12"+
    "\1\0\1\21\1\22\1\23\1\24\1\25\7\12\1\26"+
    "\1\12\1\27\1\30\1\12\1\31\2\12\1\0\2\12"+
    "\1\32\1\33\2\12\1\34\1\35\1\12\1\36\2\12"+
    "\1\0\2\12\1\37\1\12\1\40\1\12\1\41\1\0"+
    "\2\12\1\42\1\43\1\0\1\12\1\44\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\144\0\144\0\144\0\144\0\144"+
    "\0\144\0\144\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\310\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\144\0\144\0\u03b6\0\144"+
    "\0\144\0\u03e8\0\144\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2"+
    "\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\144\0\144\0\144\0\144"+
    "\0\144\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\310\0\u08ca\0\310\0\310\0\u08fc\0\310\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\310\0\310\0\u0a28\0\u0a5a\0\310"+
    "\0\310\0\u0a8c\0\310\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\310\0\u0bb8\0\310\0\u0bea\0\310\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\310\0\310\0\u0cb2\0\u0ce4\0\310\0\144\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\6\15\1\16\1\17\1\20\1\21\1\15"+
    "\1\22\1\23\1\24\1\25\5\15\1\26\1\27\1\15"+
    "\1\30\1\31\1\15\1\32\1\33\1\15\1\34\1\35"+
    "\1\36\1\37\1\15\2\3\1\35\1\15\1\3\1\40"+
    "\44\41\1\42\3\41\1\0\10\41\1\43\73\0\1\15"+
    "\1\44\31\15\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\12\0\33\15\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\12\0\10\15\1\45\2\15\1\46\17\15\1\0\2\15"+
    "\4\0\3\15\1\0\2\15\12\0\16\15\1\47\14\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\12\0\16\15"+
    "\1\50\14\15\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\12\0\13\15\1\51\1\52\16\15\1\0\2\15\4\0"+
    "\3\15\1\0\2\15\12\0\12\15\1\53\20\15\1\0"+
    "\2\15\4\0\3\15\1\0\2\15\12\0\16\15\1\54"+
    "\14\15\1\0\2\15\4\0\3\15\1\0\2\15\12\0"+
    "\11\15\1\55\21\15\1\0\2\15\4\0\3\15\1\0"+
    "\2\15\12\0\20\15\1\56\12\15\1\0\2\15\4\0"+
    "\3\15\1\0\2\15\12\0\27\15\1\57\3\15\1\0"+
    "\2\15\4\0\3\15\1\0\2\15\12\0\13\15\1\60"+
    "\17\15\1\0\2\15\4\0\3\15\1\0\2\15\12\0"+
    "\16\15\1\61\14\15\1\0\2\15\4\0\3\15\1\0"+
    "\2\15\41\0\1\62\32\0\33\15\1\0\1\15\1\63"+
    "\4\0\3\15\1\0\2\15\51\0\1\36\52\0\1\36"+
    "\11\0\1\36\1\64\26\0\1\65\13\0\1\66\2\0"+
    "\1\67\3\0\1\70\14\0\1\71\11\0\2\15\1\72"+
    "\30\15\1\0\2\15\4\0\3\15\1\0\2\15\12\0"+
    "\11\15\1\73\21\15\1\0\2\15\4\0\3\15\1\0"+
    "\2\15\12\0\14\15\1\74\16\15\1\0\2\15\4\0"+
    "\3\15\1\0\2\15\12\0\10\15\1\75\22\15\1\0"+
    "\2\15\4\0\3\15\1\0\2\15\12\0\15\15\1\76"+
    "\15\15\1\0\2\15\4\0\3\15\1\0\2\15\12\0"+
    "\32\15\1\77\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\12\0\24\15\1\100\6\15\1\0\2\15\4\0\3\15"+
    "\1\0\2\15\12\0\10\15\1\101\5\15\1\102\14\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\12\0\22\15"+
    "\1\103\10\15\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\12\0\23\15\1\104\7\15\1\0\2\15\4\0\3\15"+
    "\1\0\2\15\12\0\15\15\1\105\15\15\1\0\2\15"+
    "\4\0\3\15\1\0\2\15\12\0\30\15\1\106\2\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\12\0\24\15"+
    "\1\107\6\15\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\12\0\15\15\1\110\15\15\1\0\2\15\4\0\3\15"+
    "\1\0\2\15\30\0\1\111\43\0\26\15\1\112\4\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\56\0\1\36"+
    "\15\0\3\15\1\113\27\15\1\0\2\15\4\0\3\15"+
    "\1\0\2\15\12\0\12\15\1\114\20\15\1\0\2\15"+
    "\4\0\3\15\1\0\2\15\12\0\15\15\1\115\15\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\12\0\12\15"+
    "\1\116\20\15\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\12\0\15\15\1\117\15\15\1\0\2\15\4\0\3\15"+
    "\1\0\2\15\12\0\10\15\1\120\22\15\1\0\2\15"+
    "\4\0\3\15\1\0\2\15\12\0\23\15\1\121\7\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\12\0\23\15"+
    "\1\122\7\15\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\12\0\21\15\1\123\11\15\1\0\2\15\4\0\3\15"+
    "\1\0\2\15\12\0\10\15\1\124\22\15\1\0\2\15"+
    "\4\0\3\15\1\0\2\15\12\0\10\15\1\125\22\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\35\0\1\126"+
    "\36\0\10\15\1\127\22\15\1\0\2\15\4\0\3\15"+
    "\1\0\2\15\12\0\4\15\1\130\26\15\1\0\2\15"+
    "\4\0\3\15\1\0\2\15\12\0\13\15\1\131\17\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\12\0\12\15"+
    "\1\132\20\15\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\12\0\24\15\1\133\6\15\1\0\2\15\4\0\3\15"+
    "\1\0\2\15\12\0\13\15\1\134\17\15\1\0\2\15"+
    "\4\0\3\15\1\0\2\15\12\0\7\15\1\135\23\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\21\0\1\136"+
    "\52\0\16\15\1\137\14\15\1\0\2\15\4\0\3\15"+
    "\1\0\2\15\12\0\5\15\1\140\25\15\1\0\2\15"+
    "\4\0\3\15\1\0\2\15\12\0\13\15\1\141\17\15"+
    "\1\0\2\15\4\0\3\15\1\0\2\15\12\0\27\15"+
    "\1\142\3\15\1\0\2\15\4\0\3\15\1\0\2\15"+
    "\22\0\1\143\51\0\32\15\1\144\1\0\2\15\4\0"+
    "\3\15\1\0\2\15\12\0\6\15\1\145\24\15\1\0"+
    "\2\15\4\0\3\15\1\0\2\15\45\0\1\146\26\0"+
    "\21\15\1\147\11\15\1\0\2\15\4\0\3\15\1\0"+
    "\2\15\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\11\11\21\1\2\11\1\1\2\11\1\1\1\11"+
    "\16\1\1\0\1\1\1\0\5\11\17\1\1\0\14\1"+
    "\1\0\7\1\1\0\4\1\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    String cadena = "";
    String comL = "";
    String comM = "";
    int inicio = 0;
    int tamano = 0;
    
    private DefaultTableModel modeloSimbolos = (DefaultTableModel) tablaSimbolo.getModel();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Cierre diagonal", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Cierre diagonal", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.CierreDiag, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 39: break;
        case 32: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Align, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 40: break;
        case 23: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Div, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 41: break;
        case 30: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Body, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 42: break;
        case 26: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Html, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 43: break;
        case 19: 
          { cadena += "\r";
            tamano += 2;
          }
        case 44: break;
        case 11: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Parrafo, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 45: break;
        case 13: 
          { /*FUNCIONA COMO DELIMITADOR EN VEZ DEL PUNTO Y COMA*/
          }
        case 46: break;
        case 35: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Center, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 47: break;
        case 36: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Doctype, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 48: break;
        case 24: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Img, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 49: break;
        case 21: 
          { cadena += "\"";
            tamano += 2;
          }
        case 50: break;
        case 31: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Title, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 51: break;
        case 4: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Numeral", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Numeral", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Numeral, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 52: break;
        case 29: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Lang, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 53: break;
        case 7: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Apertura de etiqueta", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Apertura de etiqueta", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.AperturaE, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 54: break;
        case 20: 
          { cadena += "\\";
            tamano += 2;
          }
        case 55: break;
        case 38: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Justify, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 56: break;
        case 1: 
          { GUI.errores.add(new NodoError(yytext(), (yyline + 1), (yycolumn + 1), "Léxico", "Caracter no valido."));
          }
        case 57: break;
        case 3: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Coma", (yyline + 1), (yycolumn + 1)});
        modeloSimbolos.addRow(new Object[]{yytext(), "Coma", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Coma", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Coma, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 58: break;
        case 22: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Alt, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 59: break;
        case 18: 
          { cadena += "\n";
            tamano += 2;
          }
        case 60: break;
        case 14: 
          { yybegin(CADENA);
        cadena = "";
        tamano = 0;
        inicio = yychar;
          }
        case 61: break;
        case 15: 
          { cadena += yytext();
            tamano += yylength();
          }
        case 62: break;
        case 25: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Src, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 63: break;
        case 33: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Width, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 64: break;
        case 17: 
          { cadena += "\t";
            tamano += 2;
          }
        case 65: break;
        case 2: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Asignar", (yyline + 1), (yycolumn + 1)});
        modeloSimbolos.addRow(new Object[]{yytext(), "Asignar", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Asignar", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Asignar, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 66: break;
        case 16: 
          { String tmp = cadena;
            cadena = "";
            yybegin(YYINITIAL);
            modeloSimbolos.addRow(new Object[]{yytext(), "Cadena", (yyline + 1), (yycolumn + 1)});
            GUI.listaTokens.add(new Token(tmp, "Cadena", (yyline + 1), (yycolumn + 1)));
            return new Symbol(sym.CADENA, (yyline + 1), (yycolumn + 1), tmp);
          }
        case 67: break;
        case 37: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Right, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 68: break;
        case 27: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Head, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 69: break;
        case 5: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Dólar", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Dólar", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Dolar, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 70: break;
        case 8: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Cierre de etiqueta", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Cierre de etiqueta", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.CierreE, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 71: break;
        case 12: 
          { /*SE OMITEN LOS ESPACIOS*/
          }
        case 72: break;
        case 9: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Admiración", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Admiración", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Admiracion, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 73: break;
        case 10: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Identificador", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Identificador", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Ident, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 74: break;
        case 28: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Left, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 75: break;
        case 34: 
          { modeloSimbolos.addRow(new Object[]{yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)});
        GUI.listaTokens.add(new Token(yytext(), "Palabra reservada", (yyline + 1), (yycolumn + 1)));
        return new Symbol(sym.Middle, (yyline + 1), (yycolumn + 1), yytext());
          }
        case 76: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
